{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"김세진_4_exercise_Tensor을_연산하는_함수들","version":"0.3.2","provenance":[{"file_id":"https://github.com/algorithm-ai/deep-learning-engineer/blob/exercises/exercises/4_tensorflow_basis/4_Tensor%EC%9D%84_%EC%97%B0%EC%82%B0%ED%95%98%EB%8A%94_%ED%95%A8%EC%88%98%EB%93%A4.ipynb","timestamp":1562214298252}],"collapsed_sections":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"colab_type":"text","id":"QSrqCI1KKdXR"},"source":["## Tensor을 연산하는 함수들"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"TL3R2x-FL4R3","colab":{}},"source":["%matplotlib inline\n","import numpy as np\n","import tensorflow as tf \n","import matplotlib.pyplot as plt\n","import pandas as pd\n","\n","#tf.enable_eager_execution()\n","np.set_printoptions(formatter={\n","    'float_kind': lambda x: \"{0:0.3f}\".format(x)})"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-Mqc7oDEdb00","colab_type":"text"},"source":["## 예제 데이터 )  califonia housing price\n","\n","MedInc : 행정 구역 내 소득의 중앙값<br>\n","HouseAge : 행정 구역 내 주택 연식의 중앙값<br>\n","AveRooms : 평균 방 갯수<br>\n","AveBedrms : 평균 침실 갯수<br>\n","Population : 행정 구역 내 인구 수<br>\n","AveOccup : 평균 자가 비율<br>\n","Latitude : 해당 행정 구역의 위도<br>\n","Longitude : 해당 행정 구역의 경도<br>"]},{"cell_type":"code","metadata":{"id":"LWiQDcnQNnFi","colab_type":"code","outputId":"097dd85c-d738-40ec-d5f3-7ca8445dc9fe","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1562672496688,"user_tz":-540,"elapsed":459,"user":{"displayName":"김세진","photoUrl":"","userId":"12416191158956989717"}}},"source":["from sklearn.datasets import fetch_california_housing\n","california = fetch_california_housing()\n","\n","clf_data = california.data\n","\n","df = pd.DataFrame(california.data,columns=california.feature_names)\n","print(df.head())\n","print(df)"],"execution_count":38,"outputs":[{"output_type":"stream","text":["   MedInc  HouseAge  AveRooms  ...  AveOccup  Latitude  Longitude\n","0  8.3252      41.0  6.984127  ...  2.555556     37.88    -122.23\n","1  8.3014      21.0  6.238137  ...  2.109842     37.86    -122.22\n","2  7.2574      52.0  8.288136  ...  2.802260     37.85    -122.24\n","3  5.6431      52.0  5.817352  ...  2.547945     37.85    -122.25\n","4  3.8462      52.0  6.281853  ...  2.181467     37.85    -122.25\n","\n","[5 rows x 8 columns]\n","       MedInc  HouseAge  AveRooms  ...  AveOccup  Latitude  Longitude\n","0      8.3252      41.0  6.984127  ...  2.555556     37.88    -122.23\n","1      8.3014      21.0  6.238137  ...  2.109842     37.86    -122.22\n","2      7.2574      52.0  8.288136  ...  2.802260     37.85    -122.24\n","3      5.6431      52.0  5.817352  ...  2.547945     37.85    -122.25\n","4      3.8462      52.0  6.281853  ...  2.181467     37.85    -122.25\n","5      4.0368      52.0  4.761658  ...  2.139896     37.85    -122.25\n","6      3.6591      52.0  4.931907  ...  2.128405     37.84    -122.25\n","7      3.1200      52.0  4.797527  ...  1.788253     37.84    -122.25\n","8      2.0804      42.0  4.294118  ...  2.026891     37.84    -122.26\n","9      3.6912      52.0  4.970588  ...  2.172269     37.84    -122.25\n","10     3.2031      52.0  5.477612  ...  2.263682     37.85    -122.26\n","11     3.2705      52.0  4.772480  ...  2.049046     37.85    -122.26\n","12     3.0750      52.0  5.322650  ...  2.346154     37.85    -122.26\n","13     2.6736      52.0  4.000000  ...  1.982759     37.84    -122.26\n","14     1.9167      52.0  4.262903  ...  1.954839     37.85    -122.26\n","15     2.1250      50.0  4.242424  ...  2.640152     37.85    -122.26\n","16     2.7750      52.0  5.939577  ...  2.395770     37.85    -122.27\n","17     2.1202      52.0  4.052805  ...  2.138614     37.85    -122.27\n","18     1.9911      50.0  5.343675  ...  2.362768     37.84    -122.26\n","19     2.6033      52.0  5.465455  ...  2.509091     37.84    -122.27\n","20     1.3578      40.0  4.524096  ...  2.463855     37.85    -122.27\n","21     1.7135      42.0  4.478142  ...  2.538251     37.85    -122.27\n","22     1.7250      52.0  5.096234  ...  2.123431     37.84    -122.27\n","23     2.1806      52.0  5.193846  ...  2.624615     37.84    -122.27\n","24     2.6000      52.0  5.270142  ...  2.383886     37.84    -122.27\n","25     2.4038      41.0  4.495798  ...  2.663866     37.85    -122.28\n","26     2.4597      49.0  4.728033  ...  2.539749     37.85    -122.28\n","27     1.8080      52.0  4.780856  ...  2.775819     37.85    -122.28\n","28     1.6424      50.0  4.401691  ...  2.391121     37.84    -122.28\n","29     1.6875      52.0  4.703226  ...  2.548387     37.84    -122.28\n","...       ...       ...       ...  ...       ...       ...        ...\n","20610  1.3631      28.0  4.851936  ...  2.722096     39.10    -121.56\n","20611  1.2857      27.0  4.359413  ...  2.843521     39.10    -121.55\n","20612  1.4934      26.0  5.157303  ...  2.850187     39.08    -121.56\n","20613  1.4958      31.0  4.500000  ...  3.039062     39.09    -121.55\n","20614  2.4695      26.0  4.801688  ...  3.069620     39.08    -121.54\n","20615  2.3598      23.0  5.461929  ...  3.675127     39.08    -121.54\n","20616  2.0469      15.0  4.826667  ...  3.085333     39.08    -121.53\n","20617  3.3021      20.0  4.921053  ...  2.701754     39.06    -121.53\n","20618  2.2500      25.0  5.893805  ...  3.212389     39.06    -121.55\n","20619  2.7303      22.0  6.388514  ...  3.456081     39.01    -121.56\n","20620  4.5625      40.0  4.125000  ...  3.145833     39.05    -121.48\n","20621  2.3661      37.0  7.923567  ...  3.082803     39.01    -121.47\n","20622  2.4167      20.0  4.808917  ...  2.910828     39.00    -121.44\n","20623  2.8235      32.0  5.101322  ...  2.634361     39.03    -121.37\n","20624  3.0739      16.0  5.835052  ...  2.512027     39.04    -121.41\n","20625  4.1250      37.0  7.285714  ...  2.071429     39.12    -121.52\n","20626  2.1667      36.0  6.573099  ...  2.947368     39.18    -121.43\n","20627  3.0000       5.0  6.067797  ...  2.864407     39.13    -121.32\n","20628  2.5952      19.0  5.238462  ...  2.610256     39.10    -121.48\n","20629  2.0943      28.0  5.519802  ...  3.801980     39.12    -121.39\n","20630  3.5673      11.0  5.932584  ...  2.824719     39.29    -121.32\n","20631  3.5179      15.0  6.145833  ...  2.777778     39.33    -121.40\n","20632  3.1250      15.0  6.023377  ...  2.719481     39.26    -121.45\n","20633  2.5495      27.0  5.445026  ...  2.832461     39.19    -121.53\n","20634  3.7125      28.0  6.779070  ...  3.026163     39.27    -121.56\n","20635  1.5603      25.0  5.045455  ...  2.560606     39.48    -121.09\n","20636  2.5568      18.0  6.114035  ...  3.122807     39.49    -121.21\n","20637  1.7000      17.0  5.205543  ...  2.325635     39.43    -121.22\n","20638  1.8672      18.0  5.329513  ...  2.123209     39.43    -121.32\n","20639  2.3886      16.0  5.254717  ...  2.616981     39.37    -121.24\n","\n","[20640 rows x 8 columns]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"yD9-o--XU0og"},"source":[" ## 문제 1. 평균, 표준편차, 최소값, 최대값 구하기 \n","\n","+ 각 열의 평균, 표준편차, 최소값, 최대값순으로 합쳐진 행렬을 구해주세요. <br>\n","그리고 shape=(4,8) 으로 만들어  answer1 에 담아주세요."]},{"cell_type":"code","metadata":{"id":"VhFwql9MNnFt","colab_type":"code","colab":{}},"source":["# 우선 실행해주세요\n","tf_data = tf.constant(df.values)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"y3deUUTcNnF0","colab_type":"text"},"source":["#### 답안지 입력란\n","* 아래에 답을 서술하여 주세요\n","* 결과는 `answer1`에 담아주세요"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"wRQQf1w2M9VW","colab":{}},"source":["mean_ = tf.math.reduce_mean(tf_data, axis = 0)\n","std_ = tf.math.reduce_std(tf_data, axis = 0)\n","min_ = tf.math.reduce_min(tf_data, axis = 0)\n","max_ = tf.math.reduce_max(tf_data, axis = 0)\n","\n","summary = tf.concat([mean_, std_, min_, max_],axis =0)\n","\n","sess = tf.Session()\n","\n","answer1 = tf.constant(sess.run(summary), shape = [4,8])\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PHWg06nINnF5","colab_type":"text"},"source":["#### 정답 확인\n","* 정답을 입력한 후, 아래를 실행시키면 정답인지 확인합니다."]},{"cell_type":"code","metadata":{"id":"JUeqyVebNnF8","colab_type":"code","outputId":"299787c2-62aa-4be9-bf36-c886d040e80d","colab":{"base_uri":"https://localhost:8080/","height":882},"executionInfo":{"status":"error","timestamp":1562672276366,"user_tz":-540,"elapsed":659,"user":{"displayName":"김세진","photoUrl":"","userId":"12416191158956989717"}}},"source":["from numpy.testing import assert_array_almost_equal\n","\n","assert 'answer1' in globals(), \"결과를 answer1 변수에 담아주세요!\"\n","\n","A = pd.concat([df.mean(),df.std(),df.min(),df.max()],axis=1).values.T\n","\n","if \"numpy\" in dir(answer1):\n","    answer1 = answer1.numpy()\n","\n","assert_array_almost_equal(A, answer1,decimal=1,\n","                          err_msg=\"\\n\\n정답은 \\n{}\\n입니다. 다시 확인해 주세요\".format(A))\n","print(\"정답입니다!!!\")\n"],"execution_count":32,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/testing/_private/utils.py\u001b[0m in \u001b[0;36massert_array_compare\u001b[0;34m(comparison, x, y, err_msg, verbose, header, precision, equal_nan, equal_inf)\u001b[0m\n\u001b[1;32m    780\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 781\u001b[0;31m         \u001b[0mval\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcomparison\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    782\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/testing/_private/utils.py\u001b[0m in \u001b[0;36mcompare\u001b[0;34m(x, y)\u001b[0m\n\u001b[1;32m   1008\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0missubdtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mz\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumber\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1009\u001b[0;31m             \u001b[0mz\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mz\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfloat_\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# handle object arrays\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1010\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: setting an array element with a sequence.","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-32-af18adcd5efe>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m assert_array_almost_equal(A, answer1,decimal=1,\n\u001b[0;32m---> 11\u001b[0;31m                           err_msg=\"\\n\\n정답은 \\n{}\\n입니다. 다시 확인해 주세요\".format(A))\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"정답입니다!!!\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/testing/_private/utils.py\u001b[0m in \u001b[0;36massert_array_almost_equal\u001b[0;34m(x, y, decimal, err_msg, verbose)\u001b[0m\n\u001b[1;32m   1013\u001b[0m     assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,\n\u001b[1;32m   1014\u001b[0m              \u001b[0mheader\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Arrays are not almost equal to %d decimals'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mdecimal\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1015\u001b[0;31m              precision=decimal)\n\u001b[0m\u001b[1;32m   1016\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1017\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/testing/_private/utils.py\u001b[0m in \u001b[0;36massert_array_compare\u001b[0;34m(comparison, x, y, err_msg, verbose, header, precision, equal_nan, equal_inf)\u001b[0m\n\u001b[1;32m    833\u001b[0m         msg = build_err_msg([x, y], err_msg, verbose=verbose, header=header,\n\u001b[1;32m    834\u001b[0m                             names=('x', 'y'), precision=precision)\n\u001b[0;32m--> 835\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    836\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    837\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: \nerror during assertion:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.6/dist-packages/numpy/testing/_private/utils.py\", line 781, in assert_array_compare\n    val = comparison(x, y)\n  File \"/usr/local/lib/python3.6/dist-packages/numpy/testing/_private/utils.py\", line 1009, in compare\n    z = z.astype(float_)  # handle object arrays\nValueError: setting an array element with a sequence.\n\n\nArrays are not almost equal to 1 decimals\n\n\n정답은 \n[[3.871 28.639 5.429 1.097 1425.477 3.071 35.632 -119.570]\n [1.900 12.586 2.474 0.474 1132.462 10.386 2.136 2.004]\n [0.500 1.000 0.846 0.333 3.000 0.692 32.540 -124.350]\n [15.000 52.000 141.909 34.067 35682.000 1243.333 41.950 -114.310]]\n입니다. 다시 확인해 주세요\n x: array([[3.871, 28.639, 5.429, 1.097, 1425.477, 3.071, 35.632, -119.570],\n       [1.900, 12.586, 2.474, 0.474, 1132.462, 10.386, 2.136, 2.004],\n       [0.500, 1.000, 0.846, 0.333, 3.000, 0.692, 32.540, -124.350],...\n y: array(<tf.Tensor 'Const_6:0' shape=(4, 8) dtype=float64>, dtype=object)"]}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"F0mo5ieiPaIA"},"source":[" ## 문제 2. 평균 침실 갯수 정렬하기\n","\n","* AveBedrms의 값을 오름차순으로 정렬해 주세요."]},{"cell_type":"code","metadata":{"id":"GQMZNs1iNnGF","colab_type":"code","colab":{}},"source":["# 우선 실행해주세요\n","tf_data = tf.constant(df.values)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xQaGPyr4NnGK","colab_type":"text"},"source":["#### 답안지 입력란\n","* 아래에 답을 서술하여 주세요\n","* 결과는 `answer2`에 담아주세요"]},{"cell_type":"code","metadata":{"id":"-EAWcuBANnGM","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"d9c357f2-ca58-48f3-b224-842681a12a1f","executionInfo":{"status":"ok","timestamp":1562672957405,"user_tz":-540,"elapsed":626,"user":{"displayName":"김세진","photoUrl":"","userId":"12416191158956989717"}}},"source":["sess = tf.Session()\n","answer2 = tf.constant(sess.run(tf.sort(tf_data[:,3])))\n","#print(df['AveBedrms'].sort_values())\n","print(sess.run(answer2))"],"execution_count":51,"outputs":[{"output_type":"stream","text":["[0.333 0.375 0.444 ... 15.312 25.636 34.067]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Kxn-9qLpNnGT","colab_type":"text"},"source":["#### 정답 확인\n","* 정답을 입력한 후, 아래를 실행시키면 정답인지 확인합니다."]},{"cell_type":"code","metadata":{"id":"KkBovev_NnGW","colab_type":"code","outputId":"5411edcf-9ac4-455e-e2cc-d8ecb1c9770c","colab":{"base_uri":"https://localhost:8080/","height":244},"executionInfo":{"status":"error","timestamp":1562672823218,"user_tz":-540,"elapsed":613,"user":{"displayName":"김세진","photoUrl":"","userId":"12416191158956989717"}}},"source":["from numpy.testing import assert_array_almost_equal\n","\n","assert 'answer2' in globals(), \"결과를 answer2 변수에 담아주세요!\"\n","\n","A = df['AveBedrms'].sort_values()\n","\n","if \"numpy\" in dir(answer2):\n","    answer2 = answer2.numpy()\n","\n","assert_array_almost_equal(A, answer2, decimal=1,\n","                          err_msg=\"\\n\\n정답은 \\n{}\\n입니다. 다시 확인해 주세요\".format(A))\n","print(\"정답입니다!!!\")"],"execution_count":47,"outputs":[{"output_type":"error","ename":"AssertionError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-47-e34498ffe8bc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtesting\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0massert_array_almost_equal\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32massert\u001b[0m \u001b[0;34m'answer2'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mglobals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"결과를 answer2 변수에 담아주세요!\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mA\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'AveBedrms'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msort_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAssertionError\u001b[0m: 결과를 answer2 변수에 담아주세요!"]}]},{"cell_type":"code","metadata":{"id":"CCW1ukm7jvkI","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}